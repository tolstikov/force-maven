package ${outputPackage};

import java.text.DateFormat;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import com.sforce.soap.partner.sobject.SObject;
import org.joda.time.DateTime;

public class Field<T> {
    private final Fields fields;
    private final String javaName;
    private final String sfName;
    private final FieldType type;
    private final boolean custom;

    public Field(Fields fields, String javaName, String sfName, FieldType type, boolean custom) {
        this.fields = fields;
        this.javaName = javaName;
        this.sfName = sfName;
        this.type = type;
        this.custom = custom;
    }

    public String javaName() {
        return javaName;
    }

    public String apiName() {
        return custom ? fields.withNamespace(sfName) : sfName;
    }

    public String sfName() {
        return sfName;
    }

    public FieldType type() {
        return type;
    }

    @Override
    public String toString() {
        return apiName();
    }

    public T valueFrom(SObject sObject) {
        Object objValue = sObject.getField(apiName());
        if (objValue == null) {
            return null;
        }
        String strValue = objValue.toString();
        if (type == FieldType.DOUBLE) {
            return (T) Double.valueOf(strValue);
        } else if (type == FieldType.BOOLEAN) {
            return (T) Boolean.valueOf(strValue);
        } else if (type == FieldType.CALENDAR) {
            // Calendar fields returns as GregorianCalendar objects
            return (T) objValue;
        }
        return (T) objValue;
    }


    public void valueTo(SObject sObject, Object value) {
        sObject.setField(apiName(), convertValue(value));
    }

    private Object convertValue(Object value) {
        if (value == null) {
            return null;
        }
        if (apiName().equalsIgnoreCase("id")) {
            return value.toString();
        }
        String strValue = value.toString();
        if (type == FieldType.DOUBLE) {
            if (value instanceof Number) {
                return ((Number) value).doubleValue();
            } else {
                return value instanceof Double ? value : Double.valueOf(strValue);
            }
        } else if (type == FieldType.BOOLEAN) {
            return value instanceof Boolean ? value : Boolean.valueOf(strValue);
        } else if (type == FieldType.CALENDAR) {
            if (value instanceof Calendar) {
                return value;
            } else if (value instanceof Number) {
                GregorianCalendar cal = new GregorianCalendar();
                cal.setTimeInMillis(((Number) value).longValue());
                return cal;
            } else if (value instanceof Date) {
                GregorianCalendar cal = new GregorianCalendar();
                cal.setTime((Date) value);
                return cal;
            } else if (value instanceof DateTime) {
                return ((DateTime) value).toGregorianCalendar();
            } else {
                try {
                    long millis = Long.parseLong(strValue);
                    GregorianCalendar cal = new GregorianCalendar();
                    cal.setTimeInMillis(millis);
                    return cal;
                } catch (NumberFormatException ex) {
                    try {
                        DateTime dt = DateTime.parse(strValue);
                        return dt.toGregorianCalendar();
                    } catch (Exception ex2) {
                        // we tried but can't parse it
                        return value;
                    }
                }
            }
        } else {
            return value;
        }
    }
}
