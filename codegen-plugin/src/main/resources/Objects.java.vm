package ${outputPackage};

import com.google.common.collect.Lists;

import java.util.*;

public class Objects {

    private final String namespace;
    private Map<String, Fields> byApiName = new HashMap<String, Fields>();

    private final RecordType RecordType;

#foreach($objectName in $objectNames)
    private final $objectName $objectName;
#end

    public Objects(String namespace) {
        this.namespace = namespace;
        this.RecordType = new RecordType();
        this.RecordType.init(this);
        add(this.RecordType);

#foreach($objectName in $objectNames)
        this.$objectName = new $objectName();
#end

#foreach($objectName in $objectNames)
        this.${objectName}.init(this);
#end

#foreach($objectName in $objectNames)
        add(this.${objectName});
#end
    }

    private <T extends Fields> void add(T object) {
        if (object instanceof CustomSettings) {
            if (((CustomSettings) object).visibility() == CustomSettingsVisibility.PROTECTED) {
                return;
            }
        }

        this.byApiName.put(object.apiName(), object);
    }

    public String select(Collection<Field> fields) {
        StringBuilder out = new StringBuilder();
        boolean first = true;
        for (Field field : fields) {
            if (first) {
                first = false;
            } else {
                out.append(", ");
            }
            out.append(field.apiName());
        }
        return out.toString();
    }

    public String select(Field... fields) {
        return select(Arrays.asList(fields));
    }

    public String namespace() {
        return namespace;
    }

    public String namespacePrefix() {
        return (namespace == null || namespace.trim().isEmpty()) ? "" : namespace + "__" ;
    }

    public String withNamespace(String name) {
        return namespacePrefix() + name;
    }


    public Collection<String> allApiNames() {
        return byApiName.keySet();
    }

    public Collection<Fields> allFields() {
        return byApiName.values();
    }

    public Collection<Fields> customFields() {
        List<Fields> result = Lists.newArrayList();
        for (Fields objectMeta : allFields()) {
            if (objectMeta.custom()) {
                result.add(objectMeta);
            }
        }

        return Collections.unmodifiableList(result);
    }

    public Fields byApiName(String apiName) {
        return byApiName.get(apiName);
    }

    public RecordType RecordType() {
        return this.RecordType;
    }

#foreach($objectName in $objectNames)
    public $objectName $objectName() {
        return $objectName;
    }
#end
}
